# Problem: Construct Singly Linked List

Design a Singly linked list class that has a head and tail. Every node is to have two attributes: value: the value of the current node, and next: a pointer to the next node. The linked list is to be 0-indexed. The class should support the following:

### Methods:

- **SinglyLinkedList()**  
  Initializes the SinglyLinkedList object.

- **get(index)**  
  Get the node at the index passed. If the index is invalid, return -1.

- **addAtHead(value)**  
  Add a node of given value before the first element of the linked list. Return the SLL.

- **addAtTail(value)**  
  Add a node of given value at the last element of the linked list. Return the SLL.

- **addAtIndex(index, value)**  
  Add a node of given value before the indexth node in the linked list. If index equals the length of the linked list, the node will be appended to the end of the linked list. If index is greater than the length, donâ€™t insert the node (return a message 'invalid index'). Return SLL once done.

- **deleteAtIndex(index)**  
  Delete the indexth node in the linked list, if the index is valid, else nothing happens. Return the deleted node.
