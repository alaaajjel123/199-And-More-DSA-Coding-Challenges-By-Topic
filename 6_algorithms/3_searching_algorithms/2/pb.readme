# Problem: Search in Rotated Sorted Array

### Task:

You are given an integer array `nums` sorted in ascending order (with distinct values). Prior to being passed to your function, `nums` is possibly rotated at an unknown pivot index `k` (1 <= k < nums.length) such that the resulting array is:

`[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]` (0-indexed).

For example, `[0,1,2,4,5,6,7]` might be rotated at pivot index `3` and become `[4,5,6,7,0,1,2]`.

Given an integer `target`, return the index of `target` if it is in the array, else return `-1`.

### Requirements:

- You must write an algorithm with **O(log n)** runtime complexity.

### Example:

- Input: `nums = [4,5,6,7,0,1,2]`, Target: `0`
- Output: `4` (since 0 is at index 4)

- Input: `nums = [4,5,6,7,0,1,2]`, Target: `3`
- Output: `-1` (since 3 is not present in the array)
